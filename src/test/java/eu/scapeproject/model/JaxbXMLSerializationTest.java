package eu.scapeproject.model;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.URI;
import java.util.Arrays;
import java.util.Date;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;

import junit.framework.Assert;

import org.junit.BeforeClass;
import org.junit.Test;

import eu.scapeproject.model.BitStream.Type;
import eu.scapeproject.model.jaxb.MetsNamespacePrefixMapper;
import eu.scapeproject.model.metadata.dc.DCMetadata;
import eu.scapeproject.model.metadata.fits.FitsMetadata;
import eu.scapeproject.model.mets.SCAPEMarshaller;
import eu.scapeproject.model.test.TestUtil;
import eu.scapeproject.model.test.ValidationUtil;

public class JaxbXMLSerializationTest {
    private static Marshaller marshaller;
    
    @BeforeClass
    public static void setup() throws Exception{
        marshaller=JAXBContext.newInstance(FitsMetadata.class).createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.setProperty("com.sun.xml.bind.namespacePrefixMapper", new MetsNamespacePrefixMapper());
    }
    
    @Test
    public void testEntityDeserialization1() throws Exception {
        IntellectualEntity orig = TestUtil.createRandomEntity();
        ByteArrayOutputStream bos=new ByteArrayOutputStream();
        SCAPEMarshaller.getInstance().serialize(orig, bos);
        System.out.println(bos.toString());
        IntellectualEntity deserialized=SCAPEMarshaller.getInstance().deserialize(IntellectualEntity.class, new ByteArrayInputStream(bos.toByteArray()));
//        MetsMarshaller.getInstance().serialize(deserialized, System.out);
        Assert.assertEquals(orig, deserialized);
    }
    
    @Test
    public void testEntitySerialization1() throws Exception{
        java.io.File xmlFile=new java.io.File("target/mets_entity_1.xml");
        IntellectualEntity entity=TestUtil.createRandomEntity();
        FileOutputStream out=new FileOutputStream(xmlFile);
        SCAPEMarshaller.getInstance().serialize(entity, out);
        ValidationUtil.validateXML(new FileInputStream(xmlFile),this.getClass().getClassLoader().getResourceAsStream("mets.xsd"));
    }

    @Test
    public void testEntitySerialization2() throws Exception {
    	ByteArrayOutputStream bos=new ByteArrayOutputStream();
    	SCAPEMarshaller.getInstance().serialize(TestUtil.createMinimalEntity(), bos);
    }

    @Test
    public void testFitsSerialization() throws Exception{
        FitsMetadata md=TestUtil.createRandomFitsMetadata();
        FileOutputStream out=new FileOutputStream("target/fits_1.xml");
        marshaller.marshal(md, out);
    }
    
    @Test
    public void testMinimalEntityDeserialization1() throws Exception {
    	IntellectualEntity orig=TestUtil.createMinimalEntity();
    	ByteArrayOutputStream bos=new ByteArrayOutputStream();
    	SCAPEMarshaller.getInstance().serialize(orig, bos);
//    	System.out.println(bos.toString("UTF-8"));
    	IntellectualEntity desr=SCAPEMarshaller.getInstance().deserialize(IntellectualEntity.class, new ByteArrayInputStream(bos.toByteArray()));
    	Assert.assertEquals(orig, desr);
    }
    
    @Test
    public void testMinimalEntityDeserialization2() throws Exception {
        Agent agent1=new Agent.Builder()
            .name("test user")
            .note("generated by unit test cases")
            .type("Software")
            .role("User")
            .build();
        DCMetadata dc=new DCMetadata.Builder()
            .title("test-entity-1")
            .contributor(agent1)
            .date(new Date())
            .language("en")
            .format("testformat-1")
            .build();
        BitStream bs1=new BitStream.Builder()
            .identifier(new Identifier("stream-1"))
            .title("bitstream-1")
            .type(Type.STREAM)
            .build();
        File file1=new File.Builder()
            .identifier(new Identifier("file-1"))
            .uri(URI.create("http://example.com/testfile-1"))
            .bitStreams(Arrays.asList(bs1))
            .build();
        Representation r1=new Representation.Builder()
            .identifier(new Identifier("Representation-1"))
            .title("representation-1")
            .file(file1)
            .build();
        IntellectualEntity orig=new IntellectualEntity.Builder()
            .identifier(new Identifier("entity-1"))
            .alternativeIdentifiers(Arrays.asList(new Identifier("altid-2"),new Identifier("altid-2")))
            .descriptive(dc)
            .representations(Arrays.asList(r1))
            .build();
        ByteArrayOutputStream bos=new ByteArrayOutputStream();
        SCAPEMarshaller.getInstance().serialize(orig, bos);
        System.out.println(bos.toString("UTF-8"));
        IntellectualEntity desr=SCAPEMarshaller.getInstance().deserialize(IntellectualEntity.class, new ByteArrayInputStream(bos.toByteArray()));
        Assert.assertEquals(orig, desr);
    }
}
